# -*- coding: utf-8 -*-
"""SI649 Project2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144RIkqfSXUukqyJzkgWI8iV8-3-IH0PD
"""

# Commented out IPython magic to ensure Python compatibility.
# Code is compatible with either Python 2.7 or 3.X
# NB. past module required for python 3 users (https://pypi.python.org/pypi/past)
from __future__ import print_function, division, generators
import sys
print("Running Python {0}.{1}".format(
    sys.version_info[:2][0],sys.version_info[:2][1]))
if sys.version_info[:2] > (3, 0):
    print("Adding xrange for backwards compatibility".format(
            sys.version_info[:2][0],sys.version_info[:2][1]))
    from past.builtins import xrange
#from __future__ import print_function,division,generators
# %pylab inline
from scipy.stats.stats import pearsonr
import pandas as pd
import datetime as dt
from scipy.stats import kendalltau
import seaborn as sns
from random import randrange
import matplotlib.pyplot as plt
import numpy as np
sns.set(style="darkgrid")  # Optionally change plotstyle ('whitegrid', 'ticks','darkgrid')
import altair as alt
import pandas as pd

url1 = 'https://raw.githubusercontent.com/benlaken/Comment_BadruddinAslam2014/master/Data/Monsoon_data.csv'
url2 = 'https://raw.githubusercontent.com/benlaken/Comment_BadruddinAslam2014/master/Data/Olou_counts.csv'


monsoon = pd.read_csv(url1)
olou = pd.read_csv(url2)

monsoon.head()

olou.head()

"""### Step 1 Static Visulazation"""

combined_data = pd.merge(monsoon, olou, on='Date')
combined_data['Date'] = pd.to_datetime(combined_data['Date'])
combined_data['Year'] = combined_data['Date'].dt.year

# Create an interval selection over the x-axis
brush = alt.selection_interval(encodings=['x'])

# Create the base chart for precipitation with a line mark
precip_chart = alt.Chart(combined_data).mark_line().encode(
    x='Date:T',
    y='Precip:Q',
    color=alt.condition(brush, alt.value('steelblue'), alt.value('lightgray'))
).add_selection(
    brush
).properties(
    width=600,
    height=300
)

# Create the base chart for Oulu NM counts with a point mark
nm_chart = alt.Chart(combined_data).mark_point().encode(
    x='Date:T',
    y='Counts:Q',
    color=alt.condition(brush, alt.value('firebrick'), alt.value('lightgray'))
).properties(
    width=600,
    height=300
)

# Combine the charts
combined_chart = alt.vconcat(precip_chart, nm_chart).resolve_scale(y='independent')

# Display the combined chart
combined_chart.display()

"""### Step 2. Upper and lower picture linkage with selecting interval

"""

combined_data['Date'] = pd.to_datetime(combined_data['Date'])

# Create an interval selection over the x-axis
brush = alt.selection_interval(encodings=['x'])

# Base chart for Precipitation and NM Counts with line and point marks
base_chart = alt.Chart(combined_data).encode(
    x=alt.X('Date:T', title='Date'),
    y=alt.Y('Precip:Q', title='Precipitation (mm)'),
    tooltip=['Date:T', 'Precip', 'Counts']
).properties(
    width=600,
    height=300
)

# Line chart for precipitation
precip_chart = base_chart.mark_line().encode(
    color=alt.value('steelblue')
).add_selection(
    brush
)

# Point chart for Oulu NM counts
nm_chart = base_chart.mark_point().transform_filter(
    brush
).encode(
    y=alt.Y('Counts:Q', title='NM Counts'),
    color=alt.value('firebrick')
)

# Apply the brush interval selection to both charts
combined_chart = alt.vconcat(
    precip_chart,
    nm_chart
).configure_view(
    strokeWidth=0
)

# Display the combined chart
combined_chart

"""### Step 3. Display NM counts data in details"""

import altair as alt
import pandas as pd

# Assuming combined_data has been loaded and the 'Date' column is already in datetime format.

# Create an interval selection for brushing
brush = alt.selection_interval(encodings=['x'])

# Define a selection that chooses the nearest point the user's mouse is hovering over
nearest = alt.selection(type='single', nearest=True, on='mouseover', fields=['Date'], empty='none')

# Base chart for Precipitation with line mark
precip_chart = alt.Chart(combined_data).mark_line().encode(
    x=alt.X('Date:T', title='Date'),
    y=alt.Y('Precip:Q', title='Precipitation (mm)'),
    color=alt.value('steelblue'),
    tooltip=['Date:T', 'Precip', 'Counts']
).properties(
    width=600,
    height=300
).add_selection(
    brush
)

# Base chart for NM Counts with point mark
nm_chart = alt.Chart(combined_data).mark_point().encode(
    x=alt.X('Date:T', title='Date'),
    y=alt.Y('Counts:Q', title='NM Counts'),
    color=alt.value('firebrick'),
    tooltip=['Date:T', 'Counts:Q']
).properties(
    width=600,
    height=300
)

# Vertical line to be displayed where the user hovers over the NM chart
vLine = nm_chart.mark_rule(color='red').encode(
    x='Date:T',
    opacity=alt.condition(nearest, alt.value(0.7), alt.value(0))
).add_selection(nearest)

# Layer NM Counts chart with the vertical line on hover
nm_chart_with_vline = alt.layer(nm_chart, vLine).transform_filter(
    brush  # Apply the brush interval selection filter
)

# Combine the charts vertically
combined_chart = alt.vconcat(
    precip_chart,
    nm_chart_with_vline
).resolve_scale(
    y='independent'
).configure_view(
    strokeWidth=0
)

# Display the combined chart
combined_chart

"""### Step 4. Add Date range slider

"""

import warnings
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore')

import panel as pn
import vega_datasets
from bokeh.models import Div
pn.extension('vega')

ts = pd.to_datetime(combined_data['Date'])
def create_plot(date_range):

    # Apply any required transformations to the data in pandas
    start_date, end_date = map(pd.Timestamp, date_range)
    mask = (ts >= start_date) & (ts <= end_date)
    df_filtered = combined_data.loc[mask].copy()

    brush = alt.selection_interval(encodings=['x'])

    # Define a selection that chooses the nearest point the user's mouse is hovering over
    nearest = alt.selection(type='single', nearest=True, on='mouseover', fields=['Date'], empty='none')

    # Base chart for Precipitation with line mark
    precip_chart = alt.Chart(df_filtered).mark_line().encode(
        x=alt.X('Date:T', title='Date'),
        y=alt.Y('Precip:Q', title='Precipitation (mm)'),
        color=alt.value('steelblue'),
        tooltip=['Date:T', 'Precip', 'Counts']
    ).properties(
        width=600,
        height=300
    ).add_selection(
        brush
    )

    # Base chart for NM Counts with point mark
    nm_chart = alt.Chart(df_filtered).mark_point().encode(
        x=alt.X('Date:T', title='Date'),
        y=alt.Y('Counts:Q', title='NM Counts'),
        color=alt.value('firebrick'),
        tooltip=['Date:T', 'Counts:Q']
    ).properties(
        width=600,
        height=300
    )

    # Vertical line to be displayed where the user hovers over the NM chart
    vLine = nm_chart.mark_rule(color='red').encode(
        x='Date:T',
        opacity=alt.condition(nearest, alt.value(0.7), alt.value(0))
    ).add_selection(nearest)

    # Layer NM Counts chart with the vertical line on hover
    nm_chart_with_vline = alt.layer(nm_chart, vLine).transform_filter(
        brush  # Apply the brush interval selection filter
    )

    # Combine the charts vertically
    combined_chart = alt.vconcat(
        precip_chart,
        nm_chart_with_vline
    ).resolve_scale(
        y='independent'
    ).configure_view(
        strokeWidth=0
    )

    return combined_chart

date_slider = pn.widgets.DateRangeSlider(name='Date Range Slider', start=ts.min(), end=ts.max(), value=(ts.min(), ts.max()))

@pn.depends(date_slider.param.value)
def update_plot(date_range):
    try:
        return create_plot(date_range)
    except Exception as e:
        return Div(text=f"An error occurred: {e}")

app_layout = pn.Column(update_plot, date_slider)
app_layout.servable()

"""### Step 5. Add the  â€˜showâ€™ drought and flood year button"""

drought_years = [1965, 1966, 1968, 1972, 1974, 1979, 1982, 1986, 1987, 2002, 2004, 2009]
flood_years = [1964, 1970, 1971, 1973, 1975, 1978, 1983, 1988, 1990, 1994, 2007, 2008]
combined_data['Event'] = np.where(combined_data['Date'].dt.year.isin(drought_years), 'Drought',
                                  np.where(combined_data['Date'].dt.year.isin(flood_years), 'Flood', 'Normal'))
toggle_button = pn.widgets.Toggle(name='Highlight Drought and Flood Years', value=False)
date_slider = pn.widgets.DateRangeSlider(name='Date Range Slider', start=ts.min(), end=ts.max(), value=(ts.min(), ts.max()))

@pn.depends(date_slider.param.value, toggle_button.param.value)
def update_plot(date_range, highlight):
    start_date, end_date = map(pd.Timestamp, date_range)
    mask = (ts >= start_date) & (ts <= end_date)
    df_filtered = combined_data.loc[mask].copy()

    # Pre-process the data for coloring based on the toggle's state
    if highlight:
        df_filtered['Color'] = np.where(df_filtered['Event'] == 'Drought', 'red',
                                        np.where(df_filtered['Event'] == 'Flood', 'blue', 'gray'))
    else:
        df_filtered['Color'] = 'gray'

    brush = alt.selection_interval(encodings=['x'])
    nearest = alt.selection(type='single', nearest=True, on='mouseover', fields=['Date'], empty='none')

    precip_chart = alt.Chart(df_filtered).mark_line().encode(
        x='Date:T',
        y='Precip:Q',
        color=alt.value('steelblue'),
        tooltip=['Date:T', 'Precip', 'Counts']
    ).properties(width=600, height=300).add_selection(brush)

    points_chart = alt.Chart(df_filtered).mark_point(color='gray').encode(
        x='Date:T',
        y='Counts:Q',
        color=alt.Color('Color:N', legend=None),
        tooltip=['Date:T', 'Counts:Q']
    ).properties(width=600, height=300)

    vLine = points_chart.mark_rule(color='red').encode(
        x='Date:T',
        opacity=alt.condition(nearest, alt.value(0.7), alt.value(0))
    ).add_selection(nearest)

    # Combine all the layers
    points_chart_with_vline = alt.layer(points_chart, vLine).transform_filter(brush)

    combined_chart = alt.vconcat(precip_chart, points_chart_with_vline).resolve_scale(y='independent').configure_view(strokeWidth=0)

    return combined_chart

app_layout = pn.Column(pn.Row(toggle_button, date_slider), update_plot)
app_layout.servable()

